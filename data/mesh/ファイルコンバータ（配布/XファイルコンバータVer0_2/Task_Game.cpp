//-----------------------------------------------------------------------------
//ゲーム本編用タスク
//-----------------------------------------------------------------------------
#include "Task_Game.h"
#include "Task_Title.h"
#include "Task_Player.h"
//-----------------------------------------------------------------------------
//タスク内共有リソース
//-----------------------------------------------------------------------------
int				Game::refCnt;//消すな
void Game::ResourceLoad( )
{
	if(refCnt == 0){
		//共有リソースはここで読み込む
		//--------------------------------------------------
		//--------------------------------------------------
	}
	++refCnt;
}
void Game::ResourceRelease( )
{
	--refCnt;
	if(refCnt == 0){
		//共有リソースはここで解放する
		//--------------------------------------------------
		//--------------------------------------------------
	}
}
//-----------------------------------------------------------------------------
//初期化処理
//機能概要：タスク生成時に１回実行される（素材などの準備を行う）
//-----------------------------------------------------------------------------
Game::Game( ):BTask(_T("本編") )
{
	ResourceLoad( );//消すな
	drawPriority = 1000.0f;//描画プライオリティは低めに設定（値が大きいほど低い）


//	ge->PushBack( Player::Create(ML::Vec3(50.0f,100.0f,50.0f)) );

	//	カメラの設定
	ge->camera = DG::cCamera::Create(
		D3DXVECTOR3( 0.0f,   300.0f,  0.0f),		//	ターゲット位置
		D3DXVECTOR3(-1500.0f,300.0f,  0.0f),		//	カメラ位置
		D3DXVECTOR3(0.0f, 1.0f, 0.0f),				//	カメラの上方向ベクトル
		35.0f * D3DX_PI / 180.0f, 10.0f, 3000.0f,	//	視野角・視野距離
		(float)ge->screenWidth / (float)ge->screenHeight);		//	画面比率

	//背景色変更
	ge->bgColor = 0x0000FFFF;
}
//-----------------------------------------------------------------------------
//解放処理
//機能概要：タスク終了時に１回実行される（素材などの解放を行う）
//-----------------------------------------------------------------------------
Game::~Game( )
{
	ResourceRelease( );//消すな
	ge->KillAll(_T("プレイヤ"));
}
//-----------------------------------------------------------------------------
//実行処理
//機能概要：ゲームの１フレームに当たる処理
//-----------------------------------------------------------------------------
void Game::Step( )
{
}
//-----------------------------------------------------------------------------
//描画処理
//機能概要：描画処理を行う
//-----------------------------------------------------------------------------
void Game::Draw3D( )
{
}
void Game::Draw2D( )
{
}

